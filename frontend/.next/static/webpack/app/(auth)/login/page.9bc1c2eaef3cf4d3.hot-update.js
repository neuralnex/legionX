"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(auth)/login/page",{

/***/ "(app-pages-browser)/./contexts/WalletContext.tsx":
/*!************************************!*\
  !*** ./contexts/WalletContext.tsx ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletProvider: () => (/* binding */ WalletProvider),\n/* harmony export */   useWallet: () => (/* binding */ useWallet)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _newm_io_cardano_dapp_wallet_connector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @newm.io/cardano-dapp-wallet-connector */ \"(app-pages-browser)/./node_modules/.pnpm/@newm.io+cardano-dapp-walle_812f72260531c6cf910702782d3f3628/node_modules/@newm.io/cardano-dapp-wallet-connector/dist/index.js\");\n/* harmony import */ var _newm_io_cardano_dapp_wallet_connector__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_newm_io_cardano_dapp_wallet_connector__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ WalletProvider,useWallet auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst WalletContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction WalletProvider(param) {\n    let { children } = param;\n    _s();\n    const { wallet, getAddress, ...walletConnector } = (0,_newm_io_cardano_dapp_wallet_connector__WEBPACK_IMPORTED_MODULE_2__.useConnectWallet)();\n    // Extract connect and disconnect functions safely\n    const connectWalletLib = walletConnector.connectWallet;\n    const disconnectWalletLib = walletConnector.disconnectWallet;\n    const [address, setAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [balance, setBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [rewardAddresses, setRewardAddresses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [unusedAddresses, setUnusedAddresses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [availableWallets, setAvailableWallets] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [customWallet, setCustomWallet] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoadingWalletData, setIsLoadingWalletData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Check for available wallets on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WalletProvider.useEffect\": ()=>{\n            const checkAvailableWallets = {\n                \"WalletProvider.useEffect.checkAvailableWallets\": ()=>{\n                    var _window_cardano, _window_cardano1, _window_cardano2, _window_cardano3, _window_cardano4, _window_cardano5, _window_cardano6, _window_cardano7;\n                    const wallets = [];\n                    // Check for common Cardano wallets\n                    if ((_window_cardano = window.cardano) === null || _window_cardano === void 0 ? void 0 : _window_cardano.nami) wallets.push(\"nami\");\n                    if ((_window_cardano1 = window.cardano) === null || _window_cardano1 === void 0 ? void 0 : _window_cardano1.eternl) wallets.push(\"eternl\");\n                    if ((_window_cardano2 = window.cardano) === null || _window_cardano2 === void 0 ? void 0 : _window_cardano2.flint) wallets.push(\"flint\");\n                    if ((_window_cardano3 = window.cardano) === null || _window_cardano3 === void 0 ? void 0 : _window_cardano3.yoroi) wallets.push(\"yoroi\");\n                    if ((_window_cardano4 = window.cardano) === null || _window_cardano4 === void 0 ? void 0 : _window_cardano4.typhon) wallets.push(\"typhon\");\n                    if ((_window_cardano5 = window.cardano) === null || _window_cardano5 === void 0 ? void 0 : _window_cardano5.gerowallet) wallets.push(\"gerowallet\");\n                    if ((_window_cardano6 = window.cardano) === null || _window_cardano6 === void 0 ? void 0 : _window_cardano6.nufi) wallets.push(\"nufi\");\n                    if ((_window_cardano7 = window.cardano) === null || _window_cardano7 === void 0 ? void 0 : _window_cardano7.lace) wallets.push(\"lace\");\n                    setAvailableWallets(wallets);\n                }\n            }[\"WalletProvider.useEffect.checkAvailableWallets\"];\n            // Check immediately and after a short delay for wallets to load\n            checkAvailableWallets();\n            const timer = setTimeout(checkAvailableWallets, 1000);\n            return ({\n                \"WalletProvider.useEffect\": ()=>clearTimeout(timer)\n            })[\"WalletProvider.useEffect\"];\n        }\n    }[\"WalletProvider.useEffect\"], []);\n    // Use custom wallet if available, otherwise use library wallet\n    const activeWallet = customWallet || wallet;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WalletProvider.useEffect\": ()=>{\n            if (activeWallet) {\n                console.log(\"🔄 Active wallet detected, extracting data...\");\n                setIsLoadingWalletData(true);\n                // Get wallet address\n                if (customWallet) {\n                    // Handle custom wallet\n                    console.log(\"🔧 Handling custom wallet data...\");\n                    handleCustomWalletData(customWallet);\n                } else {\n                    // Handle library wallet\n                    console.log(\"📚 Handling library wallet data...\");\n                    ({\n                        \"WalletProvider.useEffect\": async ()=>{\n                            try {\n                                console.log(\"🎁 Getting reward addresses (for authentication)...\");\n                                const rewardAddresses = await activeWallet.getRewardAddresses();\n                                console.log(\"🎁 Reward addresses result:\", rewardAddresses);\n                                if (rewardAddresses && rewardAddresses.length > 0) {\n                                    setRewardAddresses(rewardAddresses[0]);\n                                    console.log(\"✅ Reward address set for authentication:\", rewardAddresses[0]);\n                                    // Use reward address as the primary address for authentication\n                                    setAddress(rewardAddresses[0]);\n                                    console.log(\"✅ Using reward address as primary address for auth\");\n                                }\n                            } catch (error) {\n                                console.error(\"❌ Error getting reward addresses:\", error);\n                            }\n                            try {\n                                console.log(\"💰 Getting balance...\");\n                                const walletBalance = activeWallet.getBalance();\n                                console.log(\"💰 Balance result:\", walletBalance);\n                                setBalance(walletBalance);\n                            } catch (error) {\n                                console.error(\"❌ Error getting balance:\", error);\n                            }\n                            try {\n                                console.log(\"📭 Getting unused addresses...\");\n                                const unusedAddresses = await activeWallet.getUnusedAddresses();\n                                console.log(\"📭 Unused addresses result:\", unusedAddresses);\n                                setUnusedAddresses(unusedAddresses[0]);\n                            } catch (error) {\n                                console.error(\"❌ Error getting unused addresses:\", error);\n                            }\n                            // Only try to get regular address if reward address failed\n                            if (!rewardAddresses || rewardAddresses.length === 0) {\n                                console.log(\"⚠️ No reward address found, trying regular address methods...\");\n                                try {\n                                    console.log(\"📍 Trying getUsedAddresses as fallback...\");\n                                    const usedAddresses = await activeWallet.getUsedAddresses();\n                                    console.log(\"📍 Used addresses:\", usedAddresses);\n                                    if (usedAddresses && usedAddresses.length > 0) {\n                                        console.log(\"✅ Setting address from getUsedAddresses:\", usedAddresses[0]);\n                                        setAddress(usedAddresses[0]);\n                                    }\n                                } catch (error) {\n                                    console.error(\"❌ getUsedAddresses failed:\", error);\n                                }\n                                if (!address) {\n                                    try {\n                                        console.log(\"📍 Trying getChangeAddress as final fallback...\");\n                                        const changeAddress = await activeWallet.getChangeAddress();\n                                        console.log(\"📍 Change address:\", changeAddress);\n                                        if (changeAddress) {\n                                            console.log(\"✅ Setting address from getChangeAddress:\", changeAddress);\n                                            setAddress(changeAddress);\n                                        }\n                                    } catch (error) {\n                                        console.error(\"❌ getChangeAddress failed:\", error);\n                                    }\n                                }\n                            }\n                            setIsLoadingWalletData(false);\n                        }\n                    })[\"WalletProvider.useEffect\"]();\n                }\n            } else {\n                // Reset state when wallet disconnects\n                console.log(\"❌ No active wallet, resetting state...\");\n                setAddress(undefined);\n                setBalance(undefined);\n                setRewardAddresses(undefined);\n                setUnusedAddresses(undefined);\n                setIsLoadingWalletData(false);\n            }\n        }\n    }[\"WalletProvider.useEffect\"], [\n        activeWallet,\n        customWallet\n    ]);\n    const handleCustomWalletData = async (walletApi)=>{\n        try {\n            console.log(\"🔍 Extracting wallet data from custom wallet API...\");\n            // Get payment addresses first (priority for authentication)\n            let walletAddress = null;\n            try {\n                console.log(\"📍 Getting used addresses (payment addresses for authentication)...\");\n                const usedAddresses = await walletApi.getUsedAddresses();\n                console.log(\"📍 Used addresses:\", usedAddresses);\n                if (usedAddresses && usedAddresses.length > 0) {\n                    walletAddress = usedAddresses[0];\n                    console.log(\"✅ Using payment address for authentication:\", walletAddress);\n                }\n            } catch (error) {\n                console.error(\"❌ Error getting used addresses:\", error);\n            }\n            // Only try reward addresses if payment addresses failed\n            if (!walletAddress) {\n                console.log(\"⚠️ No payment address found, trying reward addresses...\");\n                try {\n                    console.log(\"🎁 Getting reward addresses...\");\n                    const rewardAddresses = await walletApi.getRewardAddresses();\n                    console.log(\"🎁 Reward addresses:\", rewardAddresses);\n                    if (rewardAddresses && rewardAddresses.length > 0) {\n                        setRewardAddresses(rewardAddresses[0]);\n                        walletAddress = rewardAddresses[0];\n                        console.log(\"✅ Using reward address as fallback:\", walletAddress);\n                    }\n                } catch (error) {\n                    console.log(\"⚠️ getRewardAddresses failed:\", error);\n                    try {\n                        console.log(\"📍 Trying getChangeAddress...\");\n                        const changeAddress = await walletApi.getChangeAddress();\n                        console.log(\"📍 Change address:\", changeAddress);\n                        walletAddress = changeAddress;\n                    } catch (error2) {\n                        console.log(\"⚠️ getChangeAddress failed:\", error2);\n                    }\n                }\n            }\n            if (walletAddress) {\n                console.log(\"✅ Final wallet address for authentication:\", walletAddress);\n                setAddress(walletAddress);\n            } else {\n                console.error(\"❌ Could not extract any wallet address\");\n            }\n            // Get balance\n            try {\n                console.log(\"💰 Getting wallet balance...\");\n                const balance = await walletApi.getBalance();\n                console.log(\"💰 Balance:\", balance);\n                setBalance(balance);\n            } catch (error) {\n                console.error(\"❌ Error getting balance:\", error);\n            }\n            // Get unused addresses\n            try {\n                console.log(\"📭 Getting unused addresses...\");\n                const unusedAddresses = await walletApi.getUnusedAddresses();\n                console.log(\"📭 Unused addresses:\", unusedAddresses);\n                if (unusedAddresses && unusedAddresses.length > 0) {\n                    setUnusedAddresses(unusedAddresses[0]);\n                }\n            } catch (error) {\n                console.error(\"❌ Error getting unused addresses:\", error);\n            }\n            console.log(\"✅ Custom wallet data extraction completed\");\n        } catch (error) {\n            console.error(\"❌ Error handling custom wallet data:\", error);\n        } finally{\n            setIsLoadingWalletData(false);\n        }\n    };\n    const handleConnectWallet = async (walletName, walletApi)=>{\n        try {\n            console.log(\"\\uD83D\\uDD17 Connecting to \".concat(walletName, \"...\"));\n            if (walletApi) {\n                // Custom wallet connection\n                console.log(\"🔧 Setting custom wallet...\");\n                setCustomWallet(walletApi);\n                console.log(\"✅ Custom wallet \".concat(walletName, \" connected successfully\"));\n            } else {\n                // Library wallet connection\n                console.log(\"📚 Using library wallet connection...\");\n                await connectWalletLib(walletName);\n            }\n        } catch (error) {\n            console.error(\"❌ Error connecting to \".concat(walletName, \":\"), error);\n            throw error;\n        }\n    };\n    const handleDisconnectWallet = ()=>{\n        console.log(\"🔌 Disconnecting wallet...\");\n        // Clear custom wallet first\n        if (customWallet) {\n            setCustomWallet(null);\n        }\n        // Try to disconnect library wallet safely\n        try {\n            if (disconnectWalletLib && typeof disconnectWalletLib === \"function\") {\n                disconnectWalletLib();\n            }\n        } catch (error) {\n            console.warn(\"⚠️ Library wallet disconnect failed:\", error);\n        }\n        // Always reset all state regardless of library disconnect success\n        setAddress(undefined);\n        setBalance(undefined);\n        setRewardAddresses(undefined);\n        setUnusedAddresses(undefined);\n        setIsLoadingWalletData(false);\n        console.log(\"✅ Wallet state cleared\");\n    };\n    const value = {\n        wallet: activeWallet,\n        address,\n        balance,\n        rewardAddresses,\n        unusedAddresses,\n        isConnected: !!activeWallet,\n        availableWallets,\n        isLoadingWalletData,\n        connectWallet: handleConnectWallet,\n        disconnectWallet: handleDisconnectWallet\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(WalletContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Nexus\\\\legionX\\\\frontend\\\\contexts\\\\WalletContext.tsx\",\n        lineNumber: 307,\n        columnNumber: 10\n    }, this);\n}\n_s(WalletProvider, \"4L1zLr2Lufr8MRLwp/COnSDSB60=\", false, function() {\n    return [\n        _newm_io_cardano_dapp_wallet_connector__WEBPACK_IMPORTED_MODULE_2__.useConnectWallet\n    ];\n});\n_c = WalletProvider;\nfunction useWallet() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(WalletContext);\n    if (!context) {\n        throw new Error(\"useWallet must be used within a WalletProvider\");\n    }\n    return context;\n}\n_s1(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/WalletContext.tsx\n"));

/***/ })

});