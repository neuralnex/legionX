"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(auth)/login/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accessAPI: () => (/* binding */ accessAPI),\n/* harmony export */   authAPI: () => (/* binding */ authAPI),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   healthAPI: () => (/* binding */ healthAPI),\n/* harmony export */   ipfsAPI: () => (/* binding */ ipfsAPI),\n/* harmony export */   listingsAPI: () => (/* binding */ listingsAPI),\n/* harmony export */   premiumAPI: () => (/* binding */ premiumAPI),\n/* harmony export */   purchasesAPI: () => (/* binding */ purchasesAPI),\n/* harmony export */   rootAPI: () => (/* binding */ rootAPI)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/.pnpm/axios@1.9.0/node_modules/axios/lib/axios.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../../node_modules/process/browser.js\");\n\n// Log environment configuration\nconsole.log(\"🌐 API Configuration:\", {\n    baseURL: process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001\",\n    environment: \"development\",\n    timestamp: new Date().toISOString()\n});\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Request interceptor to add auth token and log requests\napi.interceptors.request.use((config)=>{\n    var _config_method;\n    console.log(\"🚀 API Request:\", {\n        method: (_config_method = config.method) === null || _config_method === void 0 ? void 0 : _config_method.toUpperCase(),\n        url: config.url,\n        baseURL: config.baseURL,\n        fullURL: \"\".concat(config.baseURL).concat(config.url),\n        headers: config.headers,\n        data: config.data\n    });\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    }\n    return config;\n});\n// Response interceptor for error handling and logging\napi.interceptors.response.use((response)=>{\n    console.log(\"✅ API Response Success:\", {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.config.url,\n        dataType: typeof response.data,\n        dataPreview: typeof response.data === \"string\" ? response.data.substring(0, 200) + \"...\" : response.data,\n        headers: response.headers\n    });\n    return response;\n}, (error)=>{\n    var _error_response, _error_response1, _error_config, _error_response2, _error_response3, _error_config1, _error_config2, _error_config3, _error_response4;\n    console.error(\"❌ API Response Error:\", {\n        message: error.message,\n        status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n        statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n        url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url,\n        responseData: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data,\n        responseHeaders: (_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : _error_response3.headers,\n        requestConfig: {\n            method: (_error_config1 = error.config) === null || _error_config1 === void 0 ? void 0 : _error_config1.method,\n            url: (_error_config2 = error.config) === null || _error_config2 === void 0 ? void 0 : _error_config2.url,\n            baseURL: (_error_config3 = error.config) === null || _error_config3 === void 0 ? void 0 : _error_config3.baseURL\n        }\n    });\n    // Check for common network errors\n    if (error.code === \"ECONNREFUSED\") {\n        console.error(\"🔌 Network Error: Connection refused - API server may be down\");\n    } else if (error.code === \"ENOTFOUND\") {\n        console.error(\"🌐 Network Error: DNS lookup failed - check API URL\");\n    } else if (error.message.includes(\"Network Error\")) {\n        console.error(\"🌐 Network Error: Possible CORS issue or server unreachable\");\n    }\n    if (((_error_response4 = error.response) === null || _error_response4 === void 0 ? void 0 : _error_response4.status) === 401) {\n        // Import dynamically to avoid circular dependency\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../store/useAuthStore */ \"(app-pages-browser)/./store/useAuthStore.ts\")).then((module)=>{\n            const { useAuthStore } = module;\n            useAuthStore.getState().logout();\n        });\n    }\n    return Promise.reject(error);\n});\n// Health Check API\nconst healthAPI = {\n    check: async ()=>{\n        console.log(\"❤️ Health API: Check request\");\n        const response = await api.get(\"/health\");\n        return response.data;\n    }\n};\n// API Root\nconst rootAPI = {\n    getRoot: async ()=>{\n        console.log(\"🏠 API Root: Get request\");\n        const response = await api.get(\"/\");\n        return response.data;\n    }\n};\n// Authentication API\nconst authAPI = {\n    login: async (data)=>{\n        console.log(\"🔐 Auth API: Login request\", {\n            wallet: data.wallet\n        });\n        const response = await api.post(\"/api/v1/auth/login\", data);\n        return response.data;\n    },\n    getProfile: async ()=>{\n        console.log(\"🔐 Auth API: Get profile request\");\n        const response = await api.get(\"/api/v1/auth/profile\");\n        return response.data;\n    },\n    // Updated to use correct backend endpoints\n    register: async (data)=>{\n        console.log(\"🔐 Auth API: Register request\", {\n            wallet: data.wallet\n        });\n        const response = await api.post(\"/api/v1/auth/register\", data);\n        return response.data;\n    },\n    loginWithWallet: async (data)=>{\n        console.log(\"🔐 Auth API: Wallet login request\", {\n            wallet: data.wallet,\n            hasRewardAddress: !!data.rewardAddress\n        });\n        const response = await api.post(\"/api/v1/auth/login/wallet\", data);\n        return response.data;\n    },\n    linkWallet: async (data)=>{\n        console.log(\"🔐 Auth API: Link wallet request\", {\n            wallet: data.wallet\n        });\n        const response = await api.post(\"/api/v1/auth/link-wallet\", data);\n        return response.data;\n    },\n    verifyToken: async ()=>{\n        console.log(\"🔐 Auth API: Verify token request\");\n        const response = await api.get(\"/api/v1/auth/verify\");\n        return response.data;\n    }\n};\n// Listings API\nconst listingsAPI = {\n    create: async (data)=>{\n        console.log(\"📝 Listings API: Create request\", {\n            title: data.title\n        });\n        const response = await api.post(\"/api/v1/listings\", data);\n        return response.data;\n    },\n    getById: async (id)=>{\n        console.log(\"📄 Listings API: Get by ID request\", {\n            id\n        });\n        const response = await api.get(\"/api/v1/listings/\".concat(id));\n        return response.data;\n    },\n    update: async (id, data)=>{\n        console.log(\"✏️ Listings API: Update request\", {\n            id,\n            data\n        });\n        const response = await api.put(\"/api/v1/listings/\".concat(id), data);\n        return response.data;\n    },\n    delete: async (id)=>{\n        console.log(\"🗑️ Listings API: Delete request\", {\n            id\n        });\n        await api.delete(\"/api/v1/listings/\".concat(id));\n    },\n    // Updated to use correct backend endpoint\n    getAll: async (params)=>{\n        console.log(\"📋 Listings API: Get all request\", {\n            params\n        });\n        const response = await api.get(\"/api/v1/listings\", {\n            params\n        });\n        // Additional validation for listings response\n        if (typeof response.data === \"string\") {\n            console.error(\"❌ Listings API returned HTML instead of JSON:\", {\n                responseType: typeof response.data,\n                contentStart: response.data.substring(0, 500),\n                possibleCauses: [\n                    \"Wrong API endpoint URL\",\n                    \"API server returning error page\",\n                    \"CORS preflight returning HTML\",\n                    \"API not properly configured\"\n                ]\n            });\n            throw new Error(\"API returned HTML instead of JSON - check your NEXT_PUBLIC_API_URL configuration\");\n        }\n        return response.data;\n    }\n};\n// Purchases API\nconst purchasesAPI = {\n    create: async (data)=>{\n        console.log(\"💳 Purchases API: Create request\", {\n            listingId: data.listingId\n        });\n        const response = await api.post(\"/api/v1/purchases\", data);\n        return response.data;\n    },\n    getById: async (id)=>{\n        console.log(\"📄 Purchases API: Get by ID request\", {\n            id\n        });\n        const response = await api.get(\"/api/v1/purchases/\".concat(id));\n        return response.data;\n    },\n    getUserPurchases: async (userId)=>{\n        console.log(\"📋 Purchases API: Get user purchases request\", {\n            userId\n        });\n        const response = await api.get(\"/api/v1/purchases/user/\".concat(userId));\n        return response.data;\n    },\n    // Updated to use correct backend endpoints\n    getAll: async (params)=>{\n        console.log(\"📋 Purchases API: Get all request\", {\n            params\n        });\n        const response = await api.get(\"/api/v1/purchases\", {\n            params\n        });\n        return response.data;\n    },\n    update: async (id, data)=>{\n        console.log(\"✏️ Purchases API: Update request\", {\n            id,\n            data\n        });\n        const response = await api.put(\"/api/v1/purchases/\".concat(id), data);\n        return response.data;\n    },\n    confirm: async (id)=>{\n        console.log(\"✅ Purchases API: Confirm request\", {\n            id\n        });\n        const response = await api.post(\"/api/v1/purchases/\".concat(id, \"/confirm\"));\n        return response.data;\n    }\n};\n// Premium API\nconst premiumAPI = {\n    getFeatures: async ()=>{\n        console.log(\"⭐ Premium API: Get features request\");\n        const response = await api.get(\"/api/v1/premium/features\");\n        return response.data;\n    },\n    getAnalyticsFeatures: async ()=>{\n        console.log(\"📊 Premium API: Get analytics features request\");\n        const response = await api.get(\"/api/v1/premium/analytics/features\");\n        return response.data;\n    },\n    purchasePremiumListing: async (listingId)=>{\n        console.log(\"⭐ Premium API: Purchase premium listing request\", {\n            listingId\n        });\n        const response = await api.post(\"/api/v1/premium/listing/\".concat(listingId));\n        return response.data;\n    },\n    subscribeToAnalytics: async ()=>{\n        console.log(\"📊 Premium API: Subscribe to analytics request\");\n        const response = await api.post(\"/api/v1/premium/analytics/subscribe\");\n        return response.data;\n    }\n};\n// Access Control API\nconst accessAPI = {\n    getMetadata: async (assetId)=>{\n        console.log(\"🔍 Access API: Get metadata request\", {\n            assetId\n        });\n        const response = await api.get(\"/api/v1/access/metadata/\".concat(assetId));\n        return response.data;\n    },\n    verifyAccess: async (assetId)=>{\n        console.log(\"🔐 Access API: Verify access request\", {\n            assetId\n        });\n        const response = await api.get(\"/api/v1/access/verify/\".concat(assetId));\n        return response.data;\n    }\n};\n// IPFS API\nconst ipfsAPI = {\n    uploadFile: async (file)=>{\n        console.log(\"📤 IPFS API: Upload file\", {\n            fileName: file.name,\n            size: file.size\n        });\n        const formData = new FormData();\n        formData.append('file', file);\n        const response = await api.post(\"/api/v1/ipfs/upload-file\", formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n        return response.data;\n    },\n    uploadMetadata: async (metadata, imageCid, options)=>{\n        console.log(\"📤 IPFS API: Upload metadata\", {\n            name: options.name\n        });\n        const response = await api.post(\"/api/v1/ipfs/upload-metadata\", {\n            modelMetadata: metadata,\n            imageCid,\n            options\n        });\n        return response.data;\n    },\n    getFile: async (cid)=>{\n        console.log(\"📥 IPFS API: Get file\", {\n            cid\n        });\n        const response = await api.get(\"/api/v1/ipfs/file/\".concat(cid));\n        return response.data;\n    },\n    getMetadata: async (cid)=>{\n        console.log(\"📥 IPFS API: Get metadata\", {\n            cid\n        });\n        const response = await api.get(\"/api/v1/ipfs/metadata/\".concat(cid));\n        return response.data;\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});